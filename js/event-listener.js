// Generated by CoffeeScript 1.7.1

/*
TODO
endsWith = (hostname, blockedSuffix) ->
...hostname.indexOf(blockedSuffix, hostname.length - blockedSuffix.length) !== -1;
blockedSuffix immer der Form: ".facebook.com"
endsWith("www.facebook.com", ".facebook.com") -> true!
 */

(function() {
  var MIL_TO_MIN, ScoreManager, TabInfo, badtab, blocked, callback, currentTabs, distractionStart, distractionTime, forceTwoDigits, formatDate, isInLearningPhase, learnTime, learnTimeStart, scoreManager, updateCurrentTabs,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  TabInfo = (function() {
    function TabInfo() {}

    TabInfo.prototype.costructor = function(id, time) {
      this.id = id;
      this.time = time;
    };

    return TabInfo;

  })();

  ScoreManager = (function() {
    ScoreManager.HOUR_BONUS = 20;

    ScoreManager.BONUS = 1;

    ScoreManager.MALUS = 1;

    function ScoreManager() {
      this.score = 0;
    }

    ScoreManager.prototype.newPhase = function(hours) {
      hours = hours || 1;
      return this.score = hours * ScoreManager.HOUR_BONUS;
    };

    ScoreManager.prototype.giveBonus = function(time) {
      time = time || 1;
      return this.score += time * ScoreManager.BONUS;
    };

    ScoreManager.prototype.giveMalus = function(time) {
      time = time || 1;
      return this.score -= time * ScoreManager.MALUS;
    };

    return ScoreManager;

  })();

  forceTwoDigits = function(val) {
    if (val < 10) {
      return "0" + val;
    }
    return val;
  };

  formatDate = function(date) {
    var hour, minute;
    hour = forceTwoDigits(date.getHours());
    minute = forceTwoDigits(date.getMinutes());
    return "" + hour + minute;
  };

  isInLearningPhase = false;

  badtab = [];

  blocked = [];

  distractionStart = 0;

  distractionTime = 0;

  learnTimeStart = 0;

  learnTime = 0;

  MIL_TO_MIN = 60000;

  currentTabs = [];

  scoreManager = new ScoreManager();

  updateCurrentTabs = function(callback) {
    currentTabs = [];
    return chrome.tabs.query({}, function(tabs) {
      var tab, _i, _len;
      for (_i = 0, _len = tabs.length; _i < _len; _i++) {
        tab = tabs[_i];
        currentTabs.push(tab.id);
      }
      console.log(currentTabs);
      console.log('badtab = ', badtab);
      return callback();
    });
  };

  callback = function(event) {
    var opt;
    console.log(event);
    opt = {
      type: "basic",
      title: "Seite geladen!",
      message: event.url,
      iconUrl: "images/calendar-icon_128.png"
    };
    return chrome.notifications.create('superId' + Math.random(), opt, function() {
      return console.log('notification callback!');
    });
  };

  chrome.tabs.onUpdated.addListener((function(event, changeInfo, tab) {
    var url;
    console.log('updated tab, learning?', isInLearningPhase);
    if (isInLearningPhase && changeInfo.status === 'complete') {
      url = new URL(tab.url);
      console.log('bevor update');
      return updateCurrentTabs(function() {
        var bad, badtabtemp, block, opt, regEx, _i, _j, _len, _len1, _ref, _ref1, _results;
        console.log('in update');
        badtabtemp = [];
        if (_ref = tab.id, __indexOf.call(badtab, _ref) >= 0) {
          for (_i = 0, _len = badtab.length; _i < _len; _i++) {
            bad = badtab[_i];
            if (bad !== tab.id) {
              badtabtemp.push(bad);
              console.log('bad tab!');
            }
          }
          badtab = badtabtemp;
        }
        console.log('nach tab id check', badtab, blocked);
        _results = [];
        for (_j = 0, _len1 = blocked.length; _j < _len1; _j++) {
          block = blocked[_j];
          console.log('block check', block);
          regEx = new RegExp("" + block + "$");
          if (url.hostname.match(regEx)) {
            console.log('matched!');
            opt = {
              type: "basic",
              title: "Wolltest du nicht lernen?",
              message: 'Nicht ablenken lassen!',
              iconUrl: "images/calendar-icon_128.png"
            };
            if (_ref1 = tab.id, __indexOf.call(badtab, _ref1) < 0) {
              badtab.push(tab.id);
              if (distractionStart < 1) {
                distractionStart = Date.now();
                console.log(distractionStart);
              }
            }
            console.log('notification!');
            _results.push(chrome.notifications.create('superId' + Math.random(), opt, function() {
              console.log('notification callback!');
              return console.log('badtab = ', badtab);
            }));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
    }
  }));

  chrome.tabs.onRemoved.addListener(function(tab, removeInfo) {
    var badtabtemp;
    badtabtemp = [];
    console.log('removed tab, learning?', isInLearningPhase);
    if (!isInLearningPhase) {
      return;
    }
    return updateCurrentTabs(function() {
      var bad, current, distractionEnd, _i, _j, _len, _len1;
      if (badtab.length !== 0) {
        for (_i = 0, _len = badtab.length; _i < _len; _i++) {
          bad = badtab[_i];
          for (_j = 0, _len1 = currentTabs.length; _j < _len1; _j++) {
            current = currentTabs[_j];
            if (bad === current) {
              badtabtemp.push(bad);
            }
          }
        }
      }
      badtab = badtabtemp;
      badtabtemp = [];
      if (badtab.length === 0) {
        if (!(distractionStart < 1)) {
          distractionEnd = Date.now();
          distractionTime = distractionTime + ((distractionEnd - distractionStart) / MIL_TO_MIN);
          console.log('distraction time = ', distractionTime);
        }
        distractionStart = 0;
      }
      return console.log('badtab =', badtab);
    });
  });

  chrome.runtime.onMessage.addListener(function(request) {
    var badTime, goodTime, learnTimeEnd, score, scoreTemp, type;
    type = request.type;
    goodTime = (learnTimeStart - Date.now()) / MIL_TO_MIN || 0;
    badTime = distractionTime || 0;
    score = (goodTime * ScoreManager.BONUS) - (badTime * ScoreManager.MALUS);
    if (type === 'hostnames') {
      blocked = request.hostnames;
      return console.log('hostnames erhalten', blocked);
    } else if (type === 'openPopup') {
      return chrome.runtime.sendMessage({
        isInLearningPhase: isInLearningPhase,
        score: score,
        type: 'openPopupResponse'
      });
    } else if (type === 'startLearning') {
      isInLearningPhase = true;
      learnTimeStart = Date.now();
      return alert('Lernphase gestartet!');
    } else if (type === 'stopLearning') {
      isInLearningPhase = false;
      badtab = [];
      learnTimeEnd = Date.now();
      learnTime = learnTimeEnd - learnTimeStart;
      console.log("zeit " + learnTime + " ende " + learnTimeEnd + " start " + learnTimeStart + " disk " + distractionTime);
      learnTime /= MIL_TO_MIN;
      scoreTemp = learnTime - distractionTime;
      return alert("Lernphase beendet! Gesammelte Punkte: " + (scoreTemp.toFixed(2)) + ", Du hast " + (learnTime.toFixed(2)) + " min gelernt und warst " + (distractionTime.toFixed(2)) + " min abgelenkt");
    } else {
      return console.log('invalid message received', request);
    }
  });

}).call(this);

//# sourceMappingURL=event-listener.map
